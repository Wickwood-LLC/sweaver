<?php
// $Id$

/**
 * @file
 * Sweaver functions.
 */

/**
 * Default paths to exclude the frontend editor from.
 */
define('SWEAVER_PATHS_EXCLUDE', "admin*\nnode/add*\nnode/*/edit\nuser/*/edit");

/**
 * Default selectors to exclude from selecting.
 */
define('SWEAVER_SELECTORS_EXCLUDE', "#sweaver\n#admin-menu\n.colorpicker\n#sweaver-messages\n#sweaver-popup");

/**
 * Default classes to exclude from not being themed.
 */
define('SWEAVER_CLASSES_EXCLUDE', "clear\nclear-fix\nclear-block");

/**
 * Default skin.
 */
define('SWEAVER_SKIN', "default");

/**
 * Implements hook_permission().
 */
function sweaver_permission() {
  return array(
    'configure sweaver' => array(
      'title' => t('Configure the editor, selectors, properties, types and other plugins.')
    ),
    'use editor' => array(
      'title' => t('Use the front end editor.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sweaver_menu() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_menu();
}

/**
 * Implements hook_theme().
 */
function sweaver_theme() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_theme();
}

/**
 * Implements hook_ctools_plugin_api().
 */
function sweaver_ctools_plugin_api($owner, $api) {
  if ($owner == 'sweaver' && ($api == 'sweaver' || $api == 'plugins')) {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_plugins().
 */
function sweaver_ctools_plugin_plugins() {
  return array(
    'cache' => TRUE,
    'use hooks' => TRUE,
  );
}

/**
 * Implements hook_default_sweaver_selector().
 */
function sweaver_default_sweaver_selector() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_default_sweaver_selector();
}

/**
 * Implements hook_default_sweaver_property().
 */
function sweaver_default_sweaver_property() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_default_sweaver_property();
}

/**
 * Implements hook_default_sweaver_type().
 */
function sweaver_default_sweaver_type() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_default_sweaver_type();
}

/**
 * Implements hook_sweaver_plugins().
 */
function sweaver_sweaver_plugins() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_sweaver_plugins();
}

/**
 * CTools selectors list callback for bulk export.
 */
function sweaver_ctools_selectors_list() {
  return sweaver_ctools_object_list('selector');
}

/**
 * CTools properties list callback for bulk export.
 */
function sweaver_ctools_properties_list() {
  return sweaver_ctools_object_list('property');
}

/**
 * CTools types list callback for bulk export.
 */
function sweaver_ctools_types_list() {
  return sweaver_ctools_object_list('type');
}

/**
 * Helper function to return list for CTools.
 */
function sweaver_ctools_object_list($object_type, $export_type = 2) {
  $list = array();
  $objects = sweaver_object_load(NULL, $object_type, 'enabled');
  foreach ($objects as $object) {
    if ($object->export_type != $export_type) {
      $list[$object->name] = $object->description;
    }
  }
  return $list;
}

/**
 * CTools selector export function.
 */
function sweaver_export_sweaver_selector($object) {
  return sweaver_export_sweaver_object($object, 'selector');
}

/**
 * CTools property export function.
 */
function sweaver_export_sweaver_property($object) {
  return sweaver_export_sweaver_object($object, 'property');
}

/**
 * CTools property export function.
 */
function sweaver_export_sweaver_type($object) {
  return sweaver_export_sweaver_object($object, 'type');
}

/**
 * CTools object export function.
 */
function sweaver_export_sweaver_object($object, $object_type) {
  ctools_include('export');
  sweaver_export_check_serialized_keys($object);
  $output = ctools_export_object('sweaver_'. $object_type, $object, '  ');
  return $output;
}

/**
 * Helper function to check if we have a serialized key.
 * If so convert it to an array.
 *
 * @param stdClass $object
 *   A sweaver object.
 */
function sweaver_export_check_serialized_keys($object) {
  if (isset($object->table)) {
    $object_type = str_replace('sweaver_', '', $object->table);
    $key = $object_type .'_options';
    if (isset($object->{$key}) && !empty($object->{$key}) && is_string($object->{$key})) {
      $object->{$key} = unserialize($object->{$key});
    }
  }
}

/**
 * Load one object or all objects.
 *
 * @param string $name
 *   The machine name of the object.
 * @param mixed $map
 *   Can be an array passed on by the load arguments of the menu or a string.
 *   If it's a map, the object_type will be index 4 otherwise we just have a string.
 * @param string $status
 *   Whether to return all objects or only enabled.
 * @return mixed
 *   One object or an array of objects.
 */
function sweaver_object_load($name = NULL, $map = NULL, $status = 'enabled') {

  static $run = FALSE;
  static $objects = NULL;
  $object_type = is_array($map) ? $map[6] : $map;

  if (!$run) {

    if ($objects_cache = cache_get('sweaver')) {
      $objects = $objects_cache->data;
    }
    else {
      ctools_include('export');
      $objects = new stdClass;
      foreach (array('sweaver_selector', 'sweaver_property', 'sweaver_type') as $object_to_load) {
        $loaded_objects = ctools_export_load_object($object_to_load);
        foreach ($loaded_objects as $key => $object) {
          $object_type_key = str_replace('sweaver_', '', $object->table);
          if (!isset($object->disabled) || (isset($object->disabled) && $object->disabled == FALSE)) {
            $objects->{$object_type_key}->enabled[$key] = $object;
          }
          $objects->{$object_type_key}->all[$key] = $object;
        }
      }

      // Let sweaver plugins alter objects.
      foreach (sweaver_get_plugin() as $plugin) {
        $plugin_name = $plugin['name'];
        $object = sweaver_get_plugin($plugin_name);
        if ($object->sweaver_enabled($plugin_name)) {
          $object->sweaver_objects_alter($objects);
        }
      }

      cache_set('sweaver', $objects);
    }
    $run = TRUE;
  }

  if ($name) {
    return isset($objects->{$object_type}->all[$name]) ? $objects->{$object_type}->all[$name] : FALSE;
  }
  else {
    return isset($objects->{$object_type}->{$status}) ? $objects->{$object_type}->{$status} : array();
  }
}

/**
 * Get all plugins or a plugin handler.
 *
 * @param string $plugin_name
 *   The name of the plugin.
 * @return mixed
 *   Either a list of plugins or a loaded plugin class.
 */
function sweaver_get_plugin($plugin_name = NULL) {
  static $cache = array();
  static $cached_plugins = array();

  if (empty($cached_plugins)) {
    ctools_include('plugins');
    $plugins = ctools_get_plugins('sweaver', 'plugins');
    $cached_plugins = $plugins;
  }

  if ($plugin_name == NULL) {
    return $cached_plugins;
  }
  else {
    if (!isset($cache[$plugin_name])) {
      if ($class = ctools_plugin_get_class($cached_plugins[$plugin_name], 'handler')) {
        $cache[$plugin_name] = new $class($cached_plugins[$plugin_name]);
      }
    }
    return isset($cache[$plugin_name]) ? $cache[$plugin_name] : FALSE;
  }
}

/**
 * Implementation of hook_init().
 */
function sweaver_init() {
  if (sweaver_show_editor()) {
    $inline_js_settings = array('sweaver' => array('invokes' => array()));

    foreach (sweaver_get_plugin() as $plugin) {
      $plugin_name = $plugin['name'];
      $object = sweaver_get_plugin($plugin_name);
      if ($object->sweaver_enabled($plugin_name)) {
        // Fire init.
        $object->sweaver_init();
        // CSS and JS.
        $object->sweaver_form_css_js($inline_js_settings);
      }
    }

    // JS inline settings.
    drupal_add_js($inline_js_settings, 'setting');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function sweaver_preprocess_page(&$vars) {
  if (variable_get('sweaver_load_style_when_editor_inactive', TRUE) || sweaver_show_editor()) {
    // Load css for this theme.
    global $theme_key;
    $sweaver = sweaver_get_plugin('sweaver_plugin');
    $current_style = $sweaver->sweaver_get_current_style($theme_key);
    if (isset($current_style->css)) {
      $css = $vars['css'];
      $css_path = file_default_scheme() . '://sweaver/sweaver_' . $theme_key . '_'. $current_style->thid .'.css';
      drupal_add_css($css_path, 'theme');
      $vars['css']['all']['theme'][$css_path] = TRUE;
      $vars['styles'] = drupal_get_css();
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function sweaver_page_alter(&$page) {
  // We return the complete form in the page_bottom.
  if (sweaver_show_editor()) {
    $page['page_bottom']['sweaver'] = array(
      '#markup' => drupal_render(drupal_get_form('sweaver_frontend')) . '<div id="sweaver-messages"><div class="close">x</div><div class="message"></div></div>',
    );
  }
}

/**
 * Function to check if we are going to show the editor.
 */
function sweaver_show_editor() {
  static $run = FALSE;
  static $return = FALSE;

  if (!$run) {
    $run = TRUE;

    // Let's do the check for the editor early.
    if (variable_get('sweaver_enabled', TRUE)) {
      // Path visibility.
      $path = drupal_get_path_alias($_GET['q']);
      $page_match = drupal_match_path($path, variable_get('sweaver_paths', SWEAVER_PATHS_EXCLUDE));
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], variable_get('sweaver_paths', SWEAVER_PATHS_EXCLUDE));
      }
      $page_match = !(0 xor $page_match);

      // Compare all variables.
      if (user_access('use editor') && $page_match) {
        $return = TRUE;
      }
    }
  }
  return $return;
}

/**
 * Rock 'n' roll: the sweaver editor.
 */
function sweaver_frontend($form, &$form_state) {
  $weight = 1;
  global $theme_key;
  $form['#plugins'] = array();
  $form['#theme'] = 'sweaver_plugin';
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  $plugins_order = variable_get('sweaver_plugins_weight', array());

  foreach (sweaver_get_plugin() as $plugin) {
    $plugin_name = $plugin['name'];

    $object = sweaver_get_plugin($plugin_name);

    if ($object->sweaver_enabled($plugin_name)) {

      // Calculate weight.
      $default_weight = in_array($plugin_name, $plugins_order) ? array_search($plugin_name, $plugins_order) : $weight++;
      $form['#plugins'][$default_weight] = $plugin;

      // Form.
      $plugin_form = $object->sweaver_form();
      if (!empty($plugin_form)) {
        $form[$plugin['name']]['form'] = $plugin_form;
        if (isset($plugin['handler']['tab'])) {
          $form[$plugin['name']]['#tab_name'] = isset($plugin['handler']['tab']) ? $plugin['handler']['tab'] : drupal_ucfirst($plugin_name);
          $form[$plugin['name']]['#tab_description'] = isset($plugin['handler']['tab_description']) ? $plugin['handler']['tab_description'] : '';
        }
      }
    }
  }

  // Editor messages.
  $messages = $object->sweaver_session();
  $object->sweaver_session(NULL, 'sweaver_editor_messages', TRUE);
  $form['sweaver-editor-messages'] = array(
    '#type' => 'hidden',
    '#value' => trim($messages),
  );

  $form['#current_theme'] = $theme_key;
  $form['destination'] = array(
    '#type' => 'hidden',
    '#value' => $_GET['q'],
  );

  return $form;
}

/**
 * Sweaver frontend submit.
 */
function sweaver_frontend_submit($form, &$form_state) {

  foreach (sweaver_get_plugin() as $plugin) {
    $plugin_name = $plugin['name'];

    $object = sweaver_get_plugin($plugin_name);
    if ($object->sweaver_enabled($plugin_name)) {
      // In the first version, we'll let everyone who has submit methods
      // simply do their stuff with the submitted values.
      $object->sweaver_form_submit($form, $form_state);
    }
  }

  // Redirect to same path. We issue this function so things like
  // session, current style and possible others are properly set.
  drupal_goto();
}

/**
 * Sweaver menu callback.
 *sweaver_selectors_exclude
 * @param array $settings
 *   A collection of page arguments from the menu callback.
 * @return string $output
 *   The rendered page - can be form or anything else.
 */
function sweaver_menu_callback($settings) {
  $plugin_name = $settings['plugin'];
  $callback_method = (isset($settings['callback_method'])) ? $settings['callback_method']: 'menu_callback';
  $return_method = (isset($settings['return_method'])) ? $settings['return_method'] : 'drupal_get_form';

  $object = sweaver_get_plugin($plugin_name);
  if ($object->sweaver_enabled($plugin_name)) {
    $output = $object->$callback_method();
    if (!empty($output)) {
      if ($return_method == 'drupal_get_form') {
        return drupal_get_form('sweaver_menu_callback_form', $output, $plugin_name, $callback_method);
      }
      elseif (!empty($return_method) && function_exists($return_method)) {
        return $return_method($output);
      }
      else {
        return $output;
      }
    }
  }

  return t('No page found or you do not have sufficient permission to access the page.');
}

/**
 * Helper function to return the form passed by sweaver_menu_callback.
 *
 * @param string $plugin_name
 *   Name of the plugin.
 * @param string $callback_method
 *   Name of the method to call.
 * @return string $form
 *   The rendered form.
 */
function sweaver_menu_callback_form($form, &$form_state, $current_form, $plugin_name, $callback_method) {
  $form = $current_form;
  $form['#plugin_name'] = $plugin_name;
  $form['#callback_method'] = $callback_method;
  return $form;
}

/**
 * Sweaver menu callback validate.
 */
function sweaver_menu_callback_form_validate($form, &$form_state) {
  $object = sweaver_get_plugin($form['#plugin_name']);
  $callback_validate_function = $form['#callback_method'] .'_validate';
  if (method_exists($object, $callback_validate_function)) {
    $object->$callback_validate_function($form, $form_state);
  }
}

/**
 * Sweaver menu callback form submit.
 */
function sweaver_menu_callback_form_submit($form, &$form_state) {
  $object = sweaver_get_plugin($form['#plugin_name']);
  $callback_submit_function = $form['#callback_method'] .'_submit';
  $object->$callback_submit_function($form, $form_state);
}
