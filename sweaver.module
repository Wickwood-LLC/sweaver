<?php
// $Id$

/**
* @file
* Sweaver functions.
*/

/**
 * Default paths to exclude the frontend editor from.
 */
define('SWEAVER_PATHS_DEFAULT', "admin*\nnode/add*\nnode/*/edit\nuser/*/edit");
define('SWEAVER_SELECTORS_EXCLUDE', "#sweaver\n#admin-menu\n.colorpicker\n#sweaver-messages");

/**
 * Implementation of hook_perm().
 */
function sweaver_perm() {
  return array('configure sweaver','use editor');
}

/**
 * Implementation of hook_menu().
 */
function sweaver_menu() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_menu();
}

/**
 * Implementation of hook_theme().
 */
function sweaver_theme() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_theme();
}

/**
 * Implementation of hook_default_sweaver_selector().
 */
function sweaver_default_sweaver_selector() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_default_sweaver_selector();
}

/**
 * Implementation of hook_default_sweaver_property().
 */
function sweaver_default_sweaver_property() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_default_sweaver_property();
}

/**
 * Implementation of hook_default_sweaver_type().
 */
function sweaver_default_sweaver_type() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_default_sweaver_type();
}

/**
 * Implementation of hook_sweaver_plugins().
 */
function sweaver_sweaver_plugins() {
  module_load_include('inc', 'sweaver', 'sweaver.registry');
  return _sweaver_sweaver_plugins();
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function sweaver_ctools_plugin_api($owner, $api) {
  if ($owner == 'sweaver' && ($api == 'sweaver' || $api == 'plugins')) {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_plugins().
 */
function sweaver_ctools_plugin_plugins() {
  return array(
    'cache' => TRUE,
    'use hooks' => TRUE,
  );
}

/**
 * Load one object or all objects.
 *
 * @param string $name
 *    The machine name.
 * @param mixed $map
 *    Can be an array passed on by the load arguments of the menu or a string.
 *    If it's a map, the object_type will be index 4 otherwise we just have a string.
 * @param string $type
 *    Whether to return all objects or only enabled.
 */
function sweaver_object_load($name = NULL, $map = NULL, $status = 'enabled') {

  static $run = FALSE;
  static $objects = array();
  $object_type = is_array($map) ? $map[4] : $map;

  if (!$run) {

    if ($objects_cache = cache_get('sweaver')) {
      $objects = $objects_cache->data;
    }
    else {
      ctools_include('export');
      $objects = new stdClass;
      $all_objects = ctools_export_load_object('sweaver_selector');
      $all_objects += ctools_export_load_object('sweaver_property');
      $all_objects += ctools_export_load_object('sweaver_type');
      foreach ($all_objects as $key => $object) {
        $object_type_key = str_replace('sweaver_', '', $object->table);
        if (!isset($object->disabled) || (isset($object->disabled) && $object->disabled == FALSE)) {
          $objects->{$object_type_key}->enabled[$key] = $object;
        }
        $objects->{$object_type_key}->all[$key] = $object;
      }
      cache_set('sweaver', $objects);
    }
    $run = TRUE;
  }

  if ($name) {
    return isset($objects->{$object_type}->all[$name]) ? $objects->{$object_type}->all[$name] : FALSE;
  }
  else {
    return isset($objects->{$object_type}->{$status}) ? $objects->{$object_type}->{$status} : array();
  }
}

/**
 * Get a plugin handler.
 */
function sweaver_get_plugin($plugins, $key) {
  static $cache = array();

  if (!isset($cache[$key])) {
    if ($class = ctools_plugin_get_class($plugins[$key], 'handler')) {
      $cache[$key] = new $class($plugins[$key]);
    }
  }
  return isset($cache[$key]) ? $cache[$key] : FALSE;
}

/**
 * CTools selectors list callback for bulk export.
 */
function sweaver_ctools_selectors_list() {
  return sweaver_ctools_object_list('selector');
}

/**
 * CTools properties list callback for bulk export.
 */
function sweaver_ctools_properties_list() {
  return sweaver_ctools_object_list('property');
}

/**
 * CTools types list callback for bulk export.
 */
function sweaver_ctools_types_list() {
  return sweaver_ctools_object_list('type');
}

/**
 * Helper function to return list for CTools.
 */
function sweaver_ctools_object_list($object_type, $export_type = 2) {
  $list = array();
  $objects = sweaver_object_load(NULL, $object_type, 'enabled');
  foreach ($objects as $object) {
    if ($object->export_type != $export_type) {
      $list[$object->name] = $object->description;
    }
  }
  return $list;
}

/**
 * CTools selector export function.
 */
function sweaver_export_sweaver_selector($object) {
  return sweaver_export_sweaver_object($object, 'selector');
}

/**
 * CTools property export function.
 */
function sweaver_export_sweaver_property($object) {
  return sweaver_export_sweaver_object($object, 'property');
}

/**
 * CTools property export function.
 */
function sweaver_export_sweaver_type($object) {
  return sweaver_export_sweaver_object($object, 'type');
}

/**
 * CTools object export function.
 */
function sweaver_export_sweaver_object($object, $object_type) {
  ctools_include('export');
  sweaver_export_check_serialized_keys($object);
  $output = ctools_export_object('sweaver_'. $object_type, $object, '  ');
  return $output;
}

/**
 * Check if we have a serialized key. If so convert it to an array.
 *
 * @param stdClass $object A sweaver object.
 */
function sweaver_export_check_serialized_keys($object) {
  if (isset($object->table)) {
    $object_type = str_replace('sweaver_', '', $object->table);
    $key = $object_type .'_options';
    if (isset($object->{$key}) && !empty($object->{$key}) && is_string($object->{$key})) {
      $object->{$key} = unserialize($object->{$key});
    }
  }
}

/**
 * Function to check if we are going to show the editor.
 */
function sweaver_show_editor() {
  static $run = FALSE;
  static $return = FALSE;

  if (!$run) {
    $run = TRUE;

    // Let's do the check for the editor early.
    if (variable_get('sweaver_enabled', TRUE)) {
      // Path visibility.
      $path = drupal_get_path_alias($_GET['q']);
      $page_match = drupal_match_path($path, variable_get('sweaver_paths', SWEAVER_PATHS_DEFAULT));
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], variable_get('sweaver_paths', SWEAVER_PATHS_DEFAULT));
      }
      $page_match = !(0 xor $page_match);

      // Compare all variables.
      if (user_access('use editor') && $page_match) {
        $return = TRUE;
      }
    }
  }
  return $return;
}

/**
 * Implementation of hook_init().
 */
function sweaver_init() {
  if (sweaver_show_editor()) {
    $inline_js_settings = array('sweaver' => array('invokes' => array()));

    ctools_include('plugins');
    $plugins = ctools_get_plugins('sweaver', 'plugins');
    foreach ($plugins as $plugin) {
      $plugin_name = $plugin['name'];
      $object = sweaver_get_plugin($plugins, $plugin_name);
      if ($object->is_enabled($plugin_name)) {
        // Fire init.
        $object->init();
        // CSS and JS.
        $object->frontend_css_js($inline_js_settings);
      }
    }

    // JS inline settings.
    drupal_add_js($inline_js_settings, 'setting');
  }
}

/**
 * Implementation of hook_preprocess_page().
 */
function sweaver_preprocess_page(&$vars) {
  if (variable_get('sweaver_load_style_when_editor_inactive', TRUE) || sweaver_show_editor()) {
    // Load css for this theme.
    global $theme_key;
    $current_style = sweaver_get_current_style($theme_key);
    if (isset($current_style->css)) {
      $css = $vars['css'];
      $css_path = file_directory_path() .'/sweaver/sweaver_' . $theme_key . '_'. $current_style->thid .'.css';
      drupal_add_css($css_path, 'theme');
      $vars['css']['all']['theme'][$css_path] = TRUE;
      $vars['styles'] = drupal_get_css();
    }
  }
}

/**
 * Implementation of hook_footer().
 */
function sweaver_footer($main = 0) {
  // We return the complete form in the footer.
  if (sweaver_show_editor()) {
    return drupal_get_form('sweaver_frontend') . '<div id="sweaver-messages"><div class="close">x</div><div class="message"></div></div>';
  }
}

/**
 * Rock 'n' roll: the frontend editor.
 */
function sweaver_frontend(&$form_state) {
  $form = array();
  $weight = 1;
  global $theme_key;
  $form['#plugins'] = array();
  $form['#theme'] = 'sweaver_plugin';
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  $plugins_order = variable_get('sweaver_plugins_weight', array());

  ctools_include('plugins');
  $plugins = ctools_get_plugins('sweaver', 'plugins');

  foreach ($plugins as $plugin) {
    $plugin_name = $plugin['name'];

    $object = sweaver_get_plugin($plugins, $plugin_name);

    if ($object->is_enabled($plugin_name)) {

      // Calculate weight.
      $default_weight = in_array($plugin_name, $plugins_order) ? array_search($plugin_name, $plugins_order) : $weight++;
      $form['#plugins'][$default_weight] = $plugin;

      // Form.
      $plugin_form = $object->frontend_form();
      if (!empty($plugin_form)) {
        $form[$plugin['name']]['form'] = $plugin_form;
        if (isset($plugin['handler']['tab'])) {
          $form[$plugin['name']]['#tab_name'] = isset($plugin['handler']['tab']) ? $plugin['handler']['tab'] : ucfirst($plugin_name);
          $form[$plugin['name']]['#tab_description'] = isset($plugin['handler']['tab_description']) ? $plugin['handler']['tab_description'] : '';
        }
      }
    }
  }

  $messages = '';
  if (!empty($_SESSION['sweaver_editor_messages'])) {
    foreach ($_SESSION['sweaver_editor_messages'] as $key => $value) {
      $messages .= $_SESSION['sweaver_editor_messages'][$key] ."\n";
    }
  }
  $form['sweaver-editor-messages'] = array(
    '#type' => 'hidden',
    '#value' => trim($messages),
  );
  $_SESSION['sweaver_editor_messages'] = array();

  $form['#current_theme'] = $theme_key;

  return $form;
}

/**
 * Sweaver frontend submit.
 */
function sweaver_frontend_submit($form, &$form_state) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('sweaver', 'plugins');

  foreach ($plugins as $plugin) {
    $plugin_name = $plugin['name'];

    $object = sweaver_get_plugin($plugins, $plugin_name);
    if ($object->is_enabled($plugin_name)) {
      // In the first version, we'll let everyone who has submit methods
      // simply do their stuff with the submitted values.
      $object->frontend_form_submit($form, $form_state);
    }
  }
}

/**
 * Sweaver editor containers.
 */
function sweaver_containers() {
  return array(
    'one' => t('Font'),
    'two' => t('Background'),
    'three' => t('Spacing'),
    'four' => t('Empty'),
  );
}

/**
 * Check if we have active style for this theme.
 *
 * @param string $theme The machine name of the theme.
 *
 * // TODO use ctools_static here.
 */
function sweaver_get_current_style($theme, $reset = FALSE) {
  static $css = NULL;
  static $run = FALSE;

  if (!$run || $reset) {
    $run = TRUE;
    if (isset($_SESSION['sweaver']['draft_mode']) && $_SESSION['sweaver']['draft_mode']) {
      $css = db_fetch_object(db_query("SELECT * FROM {sweaver_style} where thid = %d AND theme = '%s'", $_SESSION['sweaver']['loaded_style'], $theme));
    }
    else {
      $css = db_fetch_object(db_query("SELECT * FROM {sweaver_style} where theme = '%s' and active = 1", $theme));
    }
    if ($css) {
      return $css;
    }
  }

  return $css;
}
